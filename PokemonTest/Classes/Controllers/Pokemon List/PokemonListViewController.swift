//
//  PokemonListViewController.swift
//  PokemonTest
//
//  Created by Andrea Mario Lufino on 13/01/21.
//

import UIKit


class PokemonListViewController: UIViewController {
    
    var tableView: UITableView!
    
    var pokemon: [Pokemon]?
    
    var viewModel: PokemonListViewModel?

    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewModel = PokemonListViewModel.init(withDelegate: self)
        
        title = "PokÃ¨mon"
        
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(PokemonListTableViewCell.self, forCellReuseIdentifier: PokemonListViewModel.CellIdentifiers.pokemonList)
        
        pokemon = []
        
        UIApplication.shared.keyWindow?.showBlurredActivityIndicator(withBlurEffect: .dark)
        
        viewModel?.fetchPokemon()
    }
    
    // MARK: UI
    
    override func loadView() {

        view = UIView()
        view.backgroundColor = .white

        if #available(iOS 13.0, *) {
            tableView = UITableView.init(frame: .zero, style: UITableView.Style.insetGrouped)
        } else {
            // Fallback on earlier versions
            tableView = UITableView.init(frame: .zero, style: UITableView.Style.grouped)
        }
        
        view.addSubview(tableView)

        // Table view setup
        tableView.separatorStyle = .none
        tableView.tableFooterView = UIView.init()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: tableView.superview!.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: tableView.superview!.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: tableView.superview!.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}


// MARK: - UITableView - Delegate

extension PokemonListViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        let pk = pokemon![indexPath.row]
        
        let vc = PokemonDetailsViewController.init()
        vc.pokemon = pk
        
        navigationController?.pushViewController(vc, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        return 100
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        
        return 100
    }
}


// MARK: - UITableView - Data Source

extension PokemonListViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return pokemon?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cellIdentifier = PokemonListViewModel.CellIdentifiers.pokemonList
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as! PokemonListTableViewCell
        
        let thePokemon = pokemon![indexPath.row]
        
        cell.lblName.text = thePokemon.name?.capitalized
        if let url = thePokemon.autogeneratedImageURL {
            cell.pokemonImage.download(from: URL.init(string: url)!)
            cell.pokemonImage.download(
                from: URL.init(string: url)!,
                contentMode: UIView.ContentMode.scaleAspectFit,
                placeholder: nil) { (image) in
                    // Download completed
            }
        }
        
        return cell
    }
}


// MARK: - PokemonListViewModel - Delegate

extension PokemonListViewController: PokemonListViewModelDelegate {
    
    func pokemonListViewModelDidStartFetching(_ viewModel: PokemonListViewModel) {
        
    }
    
    func pokemonListViewModelDidFinishFetching(_ viewModel: PokemonListViewModel) {
        
        DispatchQueue.main.async {
            UIApplication.shared.keyWindow?.hideBlurredActivityIndicator()
        }
    }
    
    func pokemonListViewModel(_ viewModel: PokemonListViewModel, didFinishFetchingWithError error: Error) {
        print("Error! \(error.localizedDescription)")
    }
    
    func pokemonListViewModelDidFinishFetchingWithSuccess(_ viewModel: PokemonListViewModel) {
        
        
    }
    
    func pokemonListViewModel(_ viewModel: PokemonListViewModel, didFinishFetchingWithSuccess pokemon: [Pokemon]) {
        
        self.pokemon = pokemon
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
}
